// <auto-generated />
using System;
using Goodpets.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Goodpets.Infrastructure.Database.Migrations
{
    [DbContext(typeof(GoodpetsContext))]
    partial class GoodpetsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Goodpets.Domain.Users.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Goodpets.Domain.Users.UserAccount", b =>
                {
                    b.OwnsOne("Goodpets.Domain.Users.ValueObjects.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Password");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("UserName");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Goodpets.Domain.Users.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)")
                                .HasColumnName("Email");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Goodpets.Domain.Users.ValueObjects.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("Role");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Role")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
